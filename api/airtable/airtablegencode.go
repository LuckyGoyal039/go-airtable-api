// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ListRecordsResponse defines model for ListRecordsResponse.
type ListRecordsResponse struct {
	Records *[]RecordResponse `json:"records,omitempty"`
}

// RecordResponse defines model for RecordResponse.
type RecordResponse struct {
	CreatedTime time.Time              `json:"createdTime"`
	Fields      map[string]interface{} `json:"fields"`
	Id          string                 `json:"id"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all records from a given table
	// (GET /airtable/{baseID}/{tableName})
	ListRecords(ctx echo.Context, baseID string, tableName string) error
	// Get a single record by ID
	// (GET /airtable/{baseID}/{tableName}/{recordID})
	GetRecord(ctx echo.Context, baseID string, tableName string, recordID string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListRecords converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecords(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "baseID" -------------
	var baseID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "baseID", runtime.ParamLocationPath, ctx.Param("baseID"), &baseID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter baseID: %s", err))
	}

	// ------------- Path parameter "tableName" -------------
	var tableName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tableName", runtime.ParamLocationPath, ctx.Param("tableName"), &tableName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tableName: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListRecords(ctx, baseID, tableName)
	return err
}

// GetRecord converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecord(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "baseID" -------------
	var baseID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "baseID", runtime.ParamLocationPath, ctx.Param("baseID"), &baseID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter baseID: %s", err))
	}

	// ------------- Path parameter "tableName" -------------
	var tableName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tableName", runtime.ParamLocationPath, ctx.Param("tableName"), &tableName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tableName: %s", err))
	}

	// ------------- Path parameter "recordID" -------------
	var recordID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recordID", runtime.ParamLocationPath, ctx.Param("recordID"), &recordID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recordID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRecord(ctx, baseID, tableName, recordID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/airtable/:baseID/:tableName", wrapper.ListRecords)
	router.GET(baseURL+"/airtable/:baseID/:tableName/:recordID", wrapper.GetRecord)

}
